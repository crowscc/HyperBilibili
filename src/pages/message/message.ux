<template>
    <div class="historycontent-page">
        <image if="{{loading}}" class="loading" src="/common/icons8-loading-96.png"></image>
       <div if="{{!loading}}" class="content" for="(index, session) in list" tid="uniqueId" class="content-container">
            <image class="avatar" src="{{session.face}}@300w_300h" alt="/common/icons8-loading-96.png"></image>
            <div class="text-container">
                <text class="content_title">{{ session.title }}</text>
                <text class="content_subtitle">{{ session.subtitle }}</text>
            </div>
        </div>
        <div style="flex: 1;"></div> <!-- 添加这个元素使得下一页按钮保持在底部 -->
        <div class="pagecontrol" if="{{!loading}}">
            <input type="button" value="下一页" style="font-size: 22px; width: 90px; height: 40px" @click="NextPage"></input>
        </div>
    </div>
</template>

<script>
import prompt from '@system.prompt'
export default {
    public: {},
    private: {
        list: [],
        loading: true, // 初始化加载状态为true
        endTs: null, // 保存最后一个消息的时间戳
        NextPage() {
            if (this.endTs) {
                this.loading = true;
                this.FetchSessionList(this.endTs).then(() => {
                    this.loading = false;
                });
            } else {
                prompt.showToast({
                    message: "已经到底啦！"
                });
            }
        },
        FetchSessionList(endTs = null) {
            return new Promise((resolve, reject) => {
                const params = {
                    'session_type': 1,
                    'group_fold': 1,
                    'unfollow_fold': 0,
                    'sort_rule': 2,
                    'build': 0,
                    'mobi_app': 'web'
                };
                if (endTs !== null) {
                    params['end_ts'] = endTs;
                }

                const queryString = Object.keys(params)
                    .map(key => encodeURIComponent(key) + '=' + encodeURIComponent(params[key]))
                    .join('&');

                const url = `https://api.vc.bilibili.com/session_svr/v1/session_svr/get_sessions?${queryString}`;
                console.debug("私信会话列表url：", url);

                this.$app.$def.bilirequest.SendBiliGET(url, "json").then(response => {
                    console.debug("私信会话列表：", response);

                    if (response.code === 0) {
                        const sessionList = response.data.session_list;
                        const hasMore = response.data.has_more;
                        this.endTs = sessionList.length ? sessionList[sessionList.length - 1].session_ts : null;

                        const userIds = sessionList.map(session => session.talker_id);
                        this.FetchUserInfo(userIds).then(userInfo => {
                            this.list = sessionList.map(session => ({
                                uniqueId: session.talker_id,
                                face: userInfo[session.talker_id]?.face, // 添加 face 字段
                                title: userInfo[session.talker_id]?.name || `会话 ${session.talker_id}`,
                                subtitle: this.parseMessageContent(session)
                            }));
                            console.debug("封装后的会话列表：", this.list);

                            if (!hasMore) {
                                this.endTs = null;
                            }
                            resolve();
                        }).catch(err => {
                            console.error("FetchUserInfo 捕获到的错误：", err);
                            reject(err);
                        });
                    } else {
                        console.error("请求错误：", response.message);
                        reject(response.message);
                    }
                }).catch(err => {
                    console.error("FetchSessionList 捕获到的错误：", err);
                    reject(err);
                });
            });
        },
        FetchUserInfo(uids) {
            return new Promise((resolve, reject) => {
                const params = {
                    'uids': uids.join(','),
                    'build': 0,
                    'mobi_app': 'web'
                };
                const queryString = Object.keys(params)
                    .map(key => encodeURIComponent(key) + '=' + encodeURIComponent(params[key]))
                    .join('&');
                const url = `https://api.vc.bilibili.com/account/v1/user/cards?${queryString}`;
                console.debug("用户信息列表url：", url);

                this.$app.$def.bilirequest.SendBiliGET(url, "json").then(response => {
                    console.debug("用户信息列表：", response);

                    if (response.code === 0) {
                        const userInfo = {};
                        response.data.forEach(user => {
                            userInfo[user.mid] = user;
                        });
                        resolve(userInfo);
                    } else {
                        console.error("请求用户信息错误：", response.message);
                        reject(response.message);
                    }
                }).catch(err => {
                    console.error("FetchUserInfo 捕获到的错误：", err);
                    reject(err);
                });
            });
        },
        parseMessageContent(session) {
            const lastMsg = session.last_msg;
            let parsedContent;

            try {
                parsedContent = JSON.parse(lastMsg.content);
            } catch (error) {
                console.error('解析内容失败：', error);
                return '无法解析的内容';
            }

            return parsedContent.text ||
                   parsedContent.content ||
                   parsedContent.title ||
                   parsedContent.reply_content ||
                   '不支持的消息类型';
        }
    },
    onInit() {
        this.loading = true;
        this.FetchSessionList().then(() => {
            this.loading = false;
        });
    }
}
</script>

<style>
.historycontent-page {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 20px;
    height: 100%; /* 设置高度为100% */
}

.content-container {
    width: 100%;
    display: flex;
    justify-content: center;
    margin-bottom: 20px;
}

.content {
    background-color: rgba(255, 255, 255, 0.178);
    border-radius: 25px;
    width: 80%;
    padding: 15px;
    margin: 20px auto;
    display: flex;
    align-items: center;
}

.avatar {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    margin-right: 15px;
}

.text-container {
    display: flex;
    flex-direction: column;
    width: 100%; /* 修改为百分比宽度 */
    padding-right: 65px; /* 预留头像宽度和margin */
}

.content_title {
    font-size: 16px;
    color: white;
}

.content_subtitle {
    color: white;
    font-size: 14px;
    margin-top: 5px;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 100%;
}


.pagecontrol {
    display: flex;
    flex-direction: row;
    align-items: center;
    margin-top: 20px;
    margin-bottom: 20px; /* 确保位于页面底部 */
}

.loading {
    width: 50px;
    height: 50px;
    margin-top: 20px;
}
</style>